import streamlit as st
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import csv

# Lista vacía para agregar y almacenar usuarios
Registro = {}

# Función de inicio
def inicio():
    st.title('Bienvenido a CongratsCards')

    menu = st.radio('¿Qué acción deseas realizar?', ['Registrarme', 'Acceder a mi cuenta'])

    if menu == 'Registrarme':
        st.subheader("Tu nombre de usuario será necesario para volver a iniciar sesión, no lo olvides.")
        global usuario
        usuario = st.text_input("Ingresa tu nombre de usuario.")

        if usuario in Registro:
            st.error("Ese usuario ya existe, accede a tu cuenta o elige otro nombre de usuario.")
        else:
            contrasenia = st.text_input("Ingresa tu contraseña", type='password')
            contrasenia_verificacion = st.text_input("Verifica tu contraseña", type='password')
            if contrasenia != contrasenia_verificacion:
                st.error("Tus contraseñas no coinciden, intentalo de nuevo.")
            else:
                Registro[usuario] = contrasenia
                guardar_usuario(usuario, contrasenia)
                datos_usuario()
                if st.button('Registrarme'):
                    st.success("Tu cuenta ha sido creada con éxito.")
                    st.session_state.usuario = usuario  # Guardamos el usuario en session_state
                    st.session_state.logged_in = True  # Indicamos que el usuario está logueado
                    main()

    elif menu == 'Acceder a mi cuenta':
        st.subheader('Accede a tu cuenta')
        usuario = st.text_input("Ingresa tu nombre de usuario: ")
        password = st.text_input("Ingresa tu contraseña: ", type='password')

        if st.button('Iniciar sesión'):
            csv_filename = 'usuarios.csv'
            if verificar_usuario(csv_filename, usuario, password):
                st.success("¡Acceso concedido!")
                st.session_state.usuario = usuario  # Guardamos el usuario en session_state
                st.session_state.logged_in = True  # Indicamos que el usuario está logueado
                main()

# Función para obtener los datos del usuario
def datos_usuario():
    if "correo_remitente" not in st.session_state:
        st.session_state.correo_remitente = ""
    if "contrasena_remitente" not in st.session_state:
        st.session_state.contrasena_remitente = ""

    st.session_state.correo_remitente = st.text_input("Ingresa tu correo electrónico: ", st.session_state.correo_remitente)
    st.session_state.contrasena_remitente = st.text_input("Ingresa una contraseña de aplicación de Google: ", type='password', value=st.session_state.contrasena_remitente)

# Función para verificar el usuario
def verificar_usuario(csv_filename, username, password):
    try:
        with open(csv_filename, mode='r', newline='') as file:
            reader = csv.reader(file)
            for row in reader:
                if len(row) >= 2:
                    user, stored_password = row[0], row[1]
                    if user == username and stored_password == password:
                        return True
            return False
    except FileNotFoundError:
        st.error(f"Error: El archivo '{csv_filename}' no existe.")
        return False

# Guardar el usuario y contraseña en un archivo CSV
def guardar_usuario(usuario, contrasenia, archivo='usuarios.csv'):
    with open(archivo, 'a', newline='') as f:
        fieldnames = ['usuario', 'contrasena']
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        if f.tell() == 0:
            writer.writeheader()
        writer.writerow({'usuario': usuario, 'contrasena': contrasenia})

# Función principal para gestionar los cumpleaños
def main():
    if "usuario" not in st.session_state or not st.session_state.logged_in:
        st.warning("Debes iniciar sesión primero.")
        return

    usuario = st.session_state.usuario  # Obtener el usuario desde session_state
    st.title(f"Bienvenido {usuario}")
    cumpleanos = cargar_cumpleanos(usuario)

    st.header('¿Qué acción deseas realizar?')
    choice = st.radio('¿Qué acción deseas realizar?', ['Registrar nuevo cumpleaños', 'Mostrar cumpleaños', 'Cerrar sesión'])

    if choice == 'Registrar nuevo cumpleaños':
        nuevo_cumpleano = registrar_cumpleanos()
        if nuevo_cumpleano:
            cumpleanos.append(nuevo_cumpleano)
            guardar_cumpleanos(cumpleanos, usuario)
            st.success(f"Cumpleaños de {nuevo_cumpleano['nombre']} registrado exitosamente.")
    
    if choice == 'Mostrar cumpleaños':
        if cumpleanos:
            mostrar_cumpleanos(cumpleanos)
        else:
            st.warning("No hay cumpleaños registrados.")
    
    if choice == 'Cerrar sesión':
        cerrar_sesion()

# Función para cargar los cumpleaños
def cargar_cumpleanos(usuario):
    archivo_usuario = f"{usuario}_cumpleanos.csv"
    try:
        with open(archivo_usuario, 'r') as f:
            reader = csv.DictReader(f)
            cumpleanos = []
            for row in reader:
                row['fecha_nacimiento'] = datetime.strptime(row['fecha_nacimiento'], "%d/%m/%Y")
                cumpleanos.append(row)
            return cumpleanos
    except FileNotFoundError:
        return []

# Función para registrar un nuevo cumpleaños
def registrar_cumpleanos():
    st.header('Agrega los datos de tu amigo')

    nombre = st.text_input("Ingrese el nombre de la persona: ", key="nombre")
    fecha_nacimiento = st.text_input("Ingrese la fecha de nacimiento (dd/mm/yyyy): ", key="fecha_nacimiento")
    correo_cumpleanero = st.text_input("Ingrese el correo del cumpleañero: ", key="correo_cumpleanero")
    mensaje_personalizado = st.text_area("Ingrese un mensaje de felicitaciones para el cumpleañero: ", key="mensaje_personalizado")

    if st.button('Agregar'):
        try:
            fecha_nacimiento = datetime.strptime(fecha_nacimiento, "%d/%m/%Y")
            return {"nombre": nombre, "fecha_nacimiento": fecha_nacimiento, "mensaje_personalizado": mensaje_personalizado, "correo_cumpleanero": correo_cumpleanero}
        except ValueError:
            st.error("Fecha inválida. El formato correcto es dd/mm/yyyy.")

# Función para mostrar los cumpleaños próximos
def mostrar_cumpleanos(cumpleanos):
    hoy = datetime.today()
    for cumpleano in cumpleanos:
        nombre = cumpleano['nombre']
        fecha_nacimiento = cumpleano['fecha_nacimiento']
        correo_cumpleanero = cumpleano['correo_cumpleanero']
        mensaje_personalizado = cumpleano['mensaje_personalizado']
        dias_restantes, anio = dias_hasta_cumpleanos(fecha_nacimiento, nombre, correo_cumpleanero, mensaje_personalizado)

        if dias_restantes == 0:
            st.success(f"¡Hoy es el cumpleaños de {nombre}! 🎉")
        else:
            st.info(f"Faltan {dias_restantes} días para el cumpleaños de {nombre} ({anio})")

        st.write(f"Fecha de nacimiento: {fecha_nacimiento.strftime('%d/%m/%Y')}")
        st.write(f"Mensaje predeterminado: {cumpleano['mensaje_personalizado']}")

# Función para calcular los días hasta el próximo cumpleaños
def dias_hasta_cumpleanos(fecha_nacimiento, nombre, correo, mensaje):
    hoy = datetime.today()
    proximo_cumpleanos = fecha_nacimiento.replace(year=hoy.year)

    if proximo_cumpleanos < hoy:
        proximo_cumpleanos = proximo_cumpleanos.replace(year=hoy.year + 1)

    dias_restantes = (proximo_cumpleanos - hoy).days
    
    # Llamar a enviar_felicitaciones si hoy es el cumpleaños
    if dias_restantes == 0:
        enviar_felicitaciones(nombre, correo, mensaje)
    
    return dias_restantes, proximo_cumpleanos.year

# Función para guardar los cumpleaños en un archivo CSV
def guardar_cumpleanos(cumpleanos, usuario):
    archivo_usuario = f"{usuario}_cumpleanos.csv"
    cumpleanos_serializable = [
        {
            "nombre": cumpleano['nombre'],
            "fecha_nacimiento": cumpleano['fecha_nacimiento'].strftime("%d/%m/%Y"),
            "correo_cumpleanero": cumpleano['correo_cumpleanero'],
            "mensaje_personalizado": cumpleano['mensaje_personalizado']
        }
        for cumpleano in cumpleanos
    ]

    with open(archivo_usuario, 'w', newline='') as f:
        fieldnames = ['nombre', 'fecha_nacimiento', 'correo_cumpleanero', 'mensaje_personalizado']
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        for cumpleano in cumpleanos_serializable:
            writer.writerow(cumpleano)
  #Declaramos la funcion que nos permitira vincular los datos del cumpleañero
  # y crear un correo para el          
def enviar_felicitaciones(nombre, correo, mensaje):
    remitente = st.session_state.correo_remitente
    contrasena = st.session_state.contrasena_remitente

    # Crear el mensaje
    msg = MIMEMultipart()
    msg['From'] = remitente
    msg['To'] = correo
    msg['Subject'] = f"¡Feliz cumpleaños, {nombre}!"

    # Cuerpo del correo
    body = mensaje
    msg.attach(MIMEText(body, 'plain'))

    # Conectar al servidor de correo y enviar el mensaje
    try:
        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login(remitente, contrasena)
            text = msg.as_string()
            server.sendmail(remitente, correo, text)
        st.success(f"Felicitaciones enviadas a {nombre} ({correo}) con éxito.")
    except Exception as e:
        st.error(f"Error al enviar el correo: {str(e)}")

def cerrar_sesion():
    st.session_state.logged_in = False
    st.session_state.usuario = None
    st.session_state.correo_remitente = ""
    st.session_state.contrasena_remitente = ""
    st.cache_data.clear()  # Limpiar el caché de datos
    st.success("Has cerrado sesión con éxito.")
    st.experimental_set_query_params()  # Simular recarga de la página


# Iniciar la aplicación
if __name__ == '__main__':
    if "logged_in" in st.session_state and st.session_state.logged_in:
        main()
    else:
        inicio()
